name: Test

on:
  pull_request:    
    types: [reopened]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # 2. SETUP NODE
      - name: 2. SETUP NODE
        uses: actions/setup-node@v3
        with:
          node-version: '>=20'
          check-latest: true
      - name: 5. Install Resolution Automation Dependencies
        run: |
          node --version
          npm i dotenv --legacy-peer-deps
          npm i xml-js --legacy-peer-deps
          npm i minimist --legacy-peer-deps
          npm i html-to-json-parser --legacy-peer-deps
    # 6. GET SCRIPT FILE
      - name: 6. GET SCRIPT FILE
        run: |
          mkdir ResolutionScript && cd ResolutionScript
          wget https://github.com/MarcusVB12/AzureVisum/blob/be4368de387998ac423e511d47732070ce965921/.github/actions/send-message-action/index.js
      # - name: 5. Install Resolution Automation Dependencies
      #   run: |
      #     node --version
      #     npm i dotenv --legacy-peer-deps
      #     npm i xml-js --legacy-peer-deps
      #     npm i minimist --legacy-peer-deps
      #     npm i html-to-json-parser --legacy-peer-deps
      # - name: chamando o js
      #   uses: ./.github/actions/send-message-action
      # 7. UPDATE DEVOPS RESOLUTION
      # - name: 7. UPDATE DEVOPS RESOLUTION (${{ github.head_ref }})
      #   run: |
      #     echo $(node src/action.js)
      - name: Get Merged Branches
        run: |
          git fetch --unshallow || git fetch --depth=10000  # Garante hist√≥rico completo
          git fetch --prune  # Atualiza todas as refer√™ncias remotas

          touch merged_branches_list.txt  # Garante que o arquivo exista

          # Verificar qual √© a branch principal corretamente
          if git ls-remote --exit-code origin main; then
            MAIN_BRANCH="main"
          elif git ls-remote --exit-code origin master; then
            MAIN_BRANCH="master"
          else
            echo "Erro: Nenhuma branch principal encontrada no remoto!" && exit 1
          fi

          # Checkout correto da branch principal
          git checkout $MAIN_BRANCH || git checkout -b $MAIN_BRANCH origin/$MAIN_BRANCH
          git pull --all

          # Depura√ß√£o para listar branches antes de salv√°-las
          echo "üîé Verificando branches mergeadas..."
          git branch --merged $MAIN_BRANCH

          # Lista todas as branches mergeadas corretamente
          git branch --merged $MAIN_BRANCH | grep -v "$MAIN_BRANCH" | while read branch; do
            if [ -n "$branch" ]; then
              echo "$branch - $(git log -1 --pretty=format:'%an' $branch)" >> merged_branches_list.txt
            fi
          done

          # Exibe a lista para depura√ß√£o
          echo "‚úÖ Conte√∫do do arquivo:"
          cat merged_branches_list.txt || echo "‚ö†Ô∏è Nenhuma branch mergeada encontrada!"


      - name: Debug Merged Branches List
        run: |
          if [ -s merged_branches_list.txt ]; then
            echo "‚úÖ Arquivo gerado corretamente:"
            cat merged_branches_list.txt
          else
            echo "‚ö†Ô∏è ERRO: O arquivo est√° vazio ou n√£o existe!"
            exit 1
          fi

      - name: Upload Merged Branches List
        uses: actions/upload-artifact@v4
        with:
          name: merged-branches-list
          path: merged_branches_list.txt



      